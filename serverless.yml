service: etl-discrete-groundwater-rdb

provider:
  name: aws
  rolePermissionsBoundary:
    Fn::Sub:
      - "arn:aws:iam::${accountId}:policy/csr-Developer-Permissions-Boundary"
      - accountId:
          Ref: "AWS::AccountId"
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'TEST'}
  runtime: java11
  memorySize: 2304
  timeout: 600
  logRetentionInDays: 90
  vpc: ${self:custom.vpc}
  deploymentBucket:
    name: iow-cloud-applications
  stackTags:
    "wma:applicationId": "ETL Discrete Groundwater as RDB"
    "wma:project_id": "aqtscapture"
    "wma:contact": "Jim Kreft jkreft@usgs.gov"
    "wma:environment": ${self:provider.stage}
    "wma:taggingVersion": ${opt:taggingVersion}
    "wma:costCenter": TBD
    "wma:organization": IOW
    "displayName": "ETL Discrete GW"
    commitIdentifier: ${git:sha1}

custom:
  environments:
    TEST: test
    QA: qa
    PROD-EXTERNAL: prod-internal  # translate to prod-internal to make the consuming system happy
  exportGitVariables: false
  accountNumber : ${ssm:/iow/aws/accountNumber}
  vpc:
    securityGroupIds: ${ssm:/iow/retriever-capture/${self:provider.stage}/securityGroupIds~split}
    subnetIds: ${ssm:/iow/aws/vpc/${self:provider.stage}/subnetIds~split}
  transformDb:
    connectInfo: ${ssm:/aws/reference/secretsmanager/NWCAPTURE-DB-${self:provider.stage}~true}
  observationDb:
    connectInfo: ${ssm:/aws/reference/secretsmanager/WQP-EXTERNAL-${self:provider.stage}~true}
  bucketName: iow-rdb-files
  mailingList: ${ssm:/aws/reference/secretsmanager/AQTS-CAPTURE-MAILING-LISTS~true}

functions:
  loadRdb:
    handler: gov.usgs.wma.waterdata.groundwater.BuildRdbFileHandler
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    events:
      - schedule:
          name: etl-discrete-groundwater-rdb-${self:provider.stage}-event-all
          description: "Schedule event to generate RDB file by invoking etl-discrete-groundwater-rdb lambda"
          rate: cron(0 14 * * ? *)
          input:
            locationFolder: ALL
          enabled: true
    reservedConcurrency: 55
    environment:
      FUNCTION_NAME: loadRdb
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      TRANSFORM_DATABASE_ADDRESS: ${self:custom.transformDb.connectInfo.DATABASE_ADDRESS}
      TRANSFORM_DATABASE_PORT: ${self:custom.transformDb.connectInfo.DATABASE_PORT}
      TRANSFORM_DATABASE_NAME: ${self:custom.transformDb.connectInfo.DATABASE_NAME}
      TRANSFORM_SCHEMA_NAME: ${self:custom.transformDb.connectInfo.SCHEMA_NAME}
      TRANSFORM_SCHEMA_OWNER_USERNAME: ${self:custom.transformDb.connectInfo.SCHEMA_OWNER_USERNAME}
      TRANSFORM_SCHEMA_OWNER_PASSWORD: ${self:custom.transformDb.connectInfo.SCHEMA_OWNER_PASSWORD}
      OBSERVATION_DATABASE_ADDRESS: ${self:custom.observationDb.connectInfo.DATABASE_ADDRESS}
      OBSERVATION_DATABASE_PORT: ${self:custom.observationDb.connectInfo.DATABASE_PORT}
      OBSERVATION_DATABASE_NAME: ${self:custom.observationDb.connectInfo.DATABASE_NAME}
      OBSERVATION_SCHEMA_NAME: ${self:custom.observationDb.connectInfo.NWIS_SCHEMA_NAME}
      OBSERVATION_SCHEMA_OWNER_USERNAME: ${self:custom.observationDb.connectInfo.NWIS_SCHEMA_OWNER_USERNAME}
      OBSERVATION_SCHEMA_OWNER_PASSWORD: ${self:custom.observationDb.connectInfo.NWIS_SCHEMA_OWNER_PASSWORD}
      ROOT_LOG_LEVEL: INFO
      TIER: ${self:provider.stage}
      S3_BUCKET_NAME: ${self:custom.bucketName}-${self:custom.environments.${self:provider.stage}}
      LAMBDA_ARN: arn:aws:lambda:${self:provider.region}:${self:custom.accountNumber}:function:etl-discrete-groundwater-rdb-${self:provider.stage}-loadRdb

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}-${self:custom.environments.${self:provider.stage}}
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 2
              Status: Enabled
    snsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:service}-${self:provider.stage}-topic
        TopicName: ${self:service}-${self:provider.stage}-topic
        Subscription:
          - Protocol: email
            Endpoint: ${self:custom.mailingList.RDB_FAILURES_LIST}
    errorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-error-alarm
        AlarmDescription: Notify when number of errors exceeds the specified threshold
        Namespace: 'AWS/Lambda'
        Dimensions:
          - Name: FunctionName
            Value:
              Ref: LoadRdbLambdaFunction
        MetricName: Errors
        Statistic: Sum
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Threshold: 1
        Period: 60
        EvaluationPeriods: 1
        AlarmActions:
          - Ref: snsTopic

plugins:
  - serverless-plugin-git-variables

package:
  artifact: etl-discrete-groundwater-rdb-aws.jar
